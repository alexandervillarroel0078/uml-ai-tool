/uml-ai-tool/
├─ ai/                       # Módulo IA (LangChain SDK mínimo)
│  └─ app.py

├─ backend/                  # Backend (FastAPI)
│  ├─ alembic/               # Migraciones DB
│  │   └─ env.py
│  │   ├─ versions/
│ 
│  ├─ app/
│  │  ├─ core/               # Configuración y utilidades (JWT, seguridad, etc.)
│  │  │   ├─ config.py
│  │  │   └─ security.py
│  │  ├─ models/             # Modelos ORM
│  │  │   ├─ uml.py
│  │  │   └─ user.py
│  │  ├─ routers/            # Rutas API
│  │  │   ├─ auth.py
│  │  │   └─ uml.py
│  │  ├─ schemas/            # Pydantic schemas (DTOs)
│  │  │   ├─ auth.py
│  │  │   └─ uml.py
│  │  ├─ service/            # Lógica de negocio
│  │  │   └─ user.py
│  │  │
│  │  ├─ db.py               # Conexión DB
│  │  ├─ main.py             # Punto de entrada FastAPI

├─ alembic.ini
├─ .env.example
├─ alembic.ini
├─ __init__.py









Abre pgAdmin → loguéate.

Create → Login/Group Role…

Name: uml

Definition → Password: uml

Privileges → “Can login?” = Yes.

Create → Database…

Database: uml

Owner: uml

Repite pasos 3 y 4 de la Opción A (ajustar URLs y correr Alembic/Uvicorn).





│  ├─ tests/                 # Tests automáticos
│  │   ├─ collab/            # Servidor colaborativo
│  │   │   └─ server.py

├─ docs/                     # Documentación
│  ├─ contratos API
│  └─ diagramas UML referencia

├─ frontend/                 # Frontend (React + Vite + React-Flow)
│  ├─ src/
│  │  ├─ api/                # Cliente axios/fetch
│  │  ├─ components/         # Componentes UI
│  │  ├─ pages/              # Vistas/páginas
│  │  └─ store/              # Estado global (Yjs integrado)

